version: '3.8'

services:
  # 数据库服务
  mysql:
    image: mysql:8.0
    container_name: partcontrol-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-partcontrol}
      MYSQL_USER: ${MYSQL_USER:-partcontrol}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-partcontrol123}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    networks:
      - partcontrol-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: partcontrol-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - partcontrol-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5

  # 应用服务
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: partcontrol-app
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${MYSQL_DATABASE:-partcontrol}
      DB_USER: ${MYSQL_USER:-partcontrol}
      DB_PASSWORD: ${MYSQL_PASSWORD:-partcontrol123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_USER: ${MAIL_USER}
      MAIL_PASS: ${MAIL_PASS}
      MAIL_FROM: ${MAIL_FROM}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    volumes:
      - app_uploads:/app/backend/uploads
      - app_logs:/app/backend/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - partcontrol-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: partcontrol-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - app_uploads:/var/www/uploads:ro
    depends_on:
      - app
    networks:
      - partcontrol-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local

networks:
  partcontrol-network:
    driver: bridge 